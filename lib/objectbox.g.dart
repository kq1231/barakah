// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/accounts/models/account.dart';
import 'features/budgets/models/budget.dart';
import 'features/categories/models/category.dart';
import 'features/contacts/models/contact.dart';
import 'features/entries/models/entry.dart';
import 'features/savings/models/saving_goal.dart';
import 'features/transactions/models/transaction.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 723257418033263199),
      name: 'Account',
      lastPropertyId: const obx_int.IdUid(4, 7319884592981545517),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7715507786265651086),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 48181163583745331),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4104053052431305396),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7319884592981545517),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7653006143281060652),
            relationTarget: 'Account')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6181350945107796910),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(3, 5827861171684616060),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9219719915962537200),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7497140041849723547),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5827861171684616060),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2246583366621122334),
      name: 'Contact',
      lastPropertyId: const obx_int.IdUid(3, 1464446152713599841),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1460625936790248300),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4458695125635896470),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1464446152713599841),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1388437509732955701),
      name: 'Entry',
      lastPropertyId: const obx_int.IdUid(6, 5676576648899471708),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9087793754266283735),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6080445575037011249),
            name: 'transactionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4770163362914726396),
            relationTarget: 'Transaction'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1874964946969746843),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 8852485663030963055),
            relationTarget: 'Account'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4986712734300354057),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 929721991238473994),
            name: 'isDebit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5676576648899471708),
            name: 'categoryId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 740633888816722784),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(5, 2505440122330321124),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1080346297382029085),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8696267373316840778),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4893888422543552195),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4046019897725616040),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2505440122330321124),
            name: 'contactId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 5779602685810808741),
            relationTarget: 'Contact')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6465623724366909622),
      name: 'SavingGoal',
      lastPropertyId: const obx_int.IdUid(10, 4334387027085466203),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8766068182851955815),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5411387150541177047),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1663126855961500694),
            name: 'targetAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5272452352130648204),
            name: 'currentAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3416729695560417834),
            name: 'targetDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 65992339483023836),
            name: 'savingAccountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 4862079231364135928),
            relationTarget: 'Account'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3986588696435960670),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9030541394015405378),
            name: 'isArchived',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2722409256951412317),
            name: 'rrule',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4334387027085466203),
            name: 'recurringAmount',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 6075724319454888878),
      name: 'Budget',
      lastPropertyId: const obx_int.IdUid(6, 3871966550979633307),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4878608196630498712),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2962998048707497105),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6312611706749472611),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 8757253880787924036),
            relationTarget: 'Account'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3031911266575721047),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3697385581907996022),
            name: 'rrule',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3871966550979633307),
            name: 'notes',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 6075724319454888878),
      lastIndexId: const obx_int.IdUid(8, 8757253880787924036),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1806098615627110598, 8216805419267016031],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7260254421597484709,
        4610440391062913589,
        3664054438232235903,
        9201487928872103954,
        4006589850970082602,
        8039913880059869431,
        2988972800829968112,
        7184642977562640959,
        2938151915626991798,
        6433146668338836495,
        5969946338956407706,
        916463754704158661,
        2127868764177539973,
        3661517658658146801,
        2402876850429968481,
        2721919110677610261
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Account: obx_int.EntityDefinition<Account>(
        model: _entities[0],
        toOneRelations: (Account object) => [object.parent],
        toManyRelations: (Account object) => {},
        getId: (Account object) => object.id,
        setId: (Account object, int id) {
          object.id = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addInt64(3, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Account(name: nameParam, type: typeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.parent.attach(store);
          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Category(name: nameParam, type: typeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Contact: obx_int.EntityDefinition<Contact>(
        model: _entities[2],
        toOneRelations: (Contact object) => [],
        toManyRelations: (Contact object) => {},
        getId: (Contact object) => object.id,
        setId: (Contact object, int id) {
          object.id = id;
        },
        objectToFB: (Contact object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Contact(name: nameParam, type: typeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Entry: obx_int.EntityDefinition<Entry>(
        model: _entities[3],
        toOneRelations: (Entry object) => [object.transaction, object.account],
        toManyRelations: (Entry object) => {},
        getId: (Entry object) => object.id,
        setId: (Entry object, int id) {
          object.id = id;
        },
        objectToFB: (Entry object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.transaction.targetId);
          fbb.addInt64(2, object.account.targetId);
          fbb.addFloat64(3, object.amount);
          fbb.addBool(4, object.isDebit);
          fbb.addInt64(5, object.categoryId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final isDebitParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final categoryIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Entry(
              amount: amountParam,
              isDebit: isDebitParam,
              categoryId: categoryIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.transaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.transaction.attach(store);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.account.attach(store);
          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[4],
        toOneRelations: (Transaction object) => [object.contact],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final dateOffset = fbb.writeString(object.date);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, referenceOffset);
          fbb.addInt64(4, object.contact.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Transaction(
              date: dateParam,
              description: descriptionParam,
              reference: referenceParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.contact.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.contact.attach(store);
          return object;
        }),
    SavingGoal: obx_int.EntityDefinition<SavingGoal>(
        model: _entities[5],
        toOneRelations: (SavingGoal object) => [object.savingAccount],
        toManyRelations: (SavingGoal object) => {},
        getId: (SavingGoal object) => object.id,
        setId: (SavingGoal object, int id) {
          object.id = id;
        },
        objectToFB: (SavingGoal object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final targetDateOffset = object.targetDate == null
              ? null
              : fbb.writeString(object.targetDate!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final rruleOffset =
              object.rrule == null ? null : fbb.writeString(object.rrule!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.targetAmount);
          fbb.addFloat64(3, object.currentAmount);
          fbb.addOffset(4, targetDateOffset);
          fbb.addInt64(5, object.savingAccount.targetId);
          fbb.addOffset(6, notesOffset);
          fbb.addBool(7, object.isArchived);
          fbb.addOffset(8, rruleOffset);
          fbb.addFloat64(9, object.recurringAmount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final targetAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final currentAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final targetDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final isArchivedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final rruleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final recurringAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = SavingGoal(
              name: nameParam,
              targetAmount: targetAmountParam,
              currentAmount: currentAmountParam,
              targetDate: targetDateParam,
              notes: notesParam,
              isArchived: isArchivedParam,
              rrule: rruleParam,
              recurringAmount: recurringAmountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.savingAccount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.savingAccount.attach(store);
          return object;
        }),
    Budget: obx_int.EntityDefinition<Budget>(
        model: _entities[6],
        toOneRelations: (Budget object) => [object.account],
        toManyRelations: (Budget object) => {},
        getId: (Budget object) => object.id,
        setId: (Budget object, int id) {
          object.id = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final rruleOffset =
              object.rrule == null ? null : fbb.writeString(object.rrule!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.account.targetId);
          fbb.addFloat64(3, object.amount);
          fbb.addOffset(4, rruleOffset);
          fbb.addOffset(5, notesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final rruleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Budget(
              name: nameParam,
              amount: amountParam,
              rrule: rruleParam,
              notes: notesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.account.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// See [Account.id].
  static final id =
      obx.QueryIntegerProperty<Account>(_entities[0].properties[0]);

  /// See [Account.name].
  static final name =
      obx.QueryStringProperty<Account>(_entities[0].properties[1]);

  /// See [Account.type].
  static final type =
      obx.QueryStringProperty<Account>(_entities[0].properties[2]);

  /// See [Account.parent].
  static final parent =
      obx.QueryRelationToOne<Account, Account>(_entities[0].properties[3]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[1].properties[1]);

  /// See [Category.type].
  static final type =
      obx.QueryStringProperty<Category>(_entities[1].properties[2]);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id =
      obx.QueryIntegerProperty<Contact>(_entities[2].properties[0]);

  /// See [Contact.name].
  static final name =
      obx.QueryStringProperty<Contact>(_entities[2].properties[1]);

  /// See [Contact.type].
  static final type =
      obx.QueryStringProperty<Contact>(_entities[2].properties[2]);
}

/// [Entry] entity fields to define ObjectBox queries.
class Entry_ {
  /// See [Entry.id].
  static final id = obx.QueryIntegerProperty<Entry>(_entities[3].properties[0]);

  /// See [Entry.transaction].
  static final transaction =
      obx.QueryRelationToOne<Entry, Transaction>(_entities[3].properties[1]);

  /// See [Entry.account].
  static final account =
      obx.QueryRelationToOne<Entry, Account>(_entities[3].properties[2]);

  /// See [Entry.amount].
  static final amount =
      obx.QueryDoubleProperty<Entry>(_entities[3].properties[3]);

  /// See [Entry.isDebit].
  static final isDebit =
      obx.QueryBooleanProperty<Entry>(_entities[3].properties[4]);

  /// See [Entry.categoryId].
  static final categoryId =
      obx.QueryIntegerProperty<Entry>(_entities[3].properties[5]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[4].properties[0]);

  /// See [Transaction.date].
  static final date =
      obx.QueryStringProperty<Transaction>(_entities[4].properties[1]);

  /// See [Transaction.description].
  static final description =
      obx.QueryStringProperty<Transaction>(_entities[4].properties[2]);

  /// See [Transaction.reference].
  static final reference =
      obx.QueryStringProperty<Transaction>(_entities[4].properties[3]);

  /// See [Transaction.contact].
  static final contact =
      obx.QueryRelationToOne<Transaction, Contact>(_entities[4].properties[4]);
}

/// [SavingGoal] entity fields to define ObjectBox queries.
class SavingGoal_ {
  /// See [SavingGoal.id].
  static final id =
      obx.QueryIntegerProperty<SavingGoal>(_entities[5].properties[0]);

  /// See [SavingGoal.name].
  static final name =
      obx.QueryStringProperty<SavingGoal>(_entities[5].properties[1]);

  /// See [SavingGoal.targetAmount].
  static final targetAmount =
      obx.QueryDoubleProperty<SavingGoal>(_entities[5].properties[2]);

  /// See [SavingGoal.currentAmount].
  static final currentAmount =
      obx.QueryDoubleProperty<SavingGoal>(_entities[5].properties[3]);

  /// See [SavingGoal.targetDate].
  static final targetDate =
      obx.QueryStringProperty<SavingGoal>(_entities[5].properties[4]);

  /// See [SavingGoal.savingAccount].
  static final savingAccount =
      obx.QueryRelationToOne<SavingGoal, Account>(_entities[5].properties[5]);

  /// See [SavingGoal.notes].
  static final notes =
      obx.QueryStringProperty<SavingGoal>(_entities[5].properties[6]);

  /// See [SavingGoal.isArchived].
  static final isArchived =
      obx.QueryBooleanProperty<SavingGoal>(_entities[5].properties[7]);

  /// See [SavingGoal.rrule].
  static final rrule =
      obx.QueryStringProperty<SavingGoal>(_entities[5].properties[8]);

  /// See [SavingGoal.recurringAmount].
  static final recurringAmount =
      obx.QueryDoubleProperty<SavingGoal>(_entities[5].properties[9]);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// See [Budget.id].
  static final id =
      obx.QueryIntegerProperty<Budget>(_entities[6].properties[0]);

  /// See [Budget.name].
  static final name =
      obx.QueryStringProperty<Budget>(_entities[6].properties[1]);

  /// See [Budget.account].
  static final account =
      obx.QueryRelationToOne<Budget, Account>(_entities[6].properties[2]);

  /// See [Budget.amount].
  static final amount =
      obx.QueryDoubleProperty<Budget>(_entities[6].properties[3]);

  /// See [Budget.rrule].
  static final rrule =
      obx.QueryStringProperty<Budget>(_entities[6].properties[4]);

  /// See [Budget.notes].
  static final notes =
      obx.QueryStringProperty<Budget>(_entities[6].properties[5]);
}
